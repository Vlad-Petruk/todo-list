(()=>{"use strict";const t=(t,e,n,o,d)=>({title:t,description:e,dueDate:n,priority:o,complite:d});let e=[{id:"all",title:"All Todos",todos:[t("Open me...","i know how you feel... but keep going, just one step at a time","11/12/12","top")]}];document.addEventListener("DOMContentLoaded",(function(){(()=>{const n=document.getElementById("navigation"),o=document.getElementById("content"),d=document.getElementById("modal"),i=document.getElementById("modal-content");function l(){n.innerHTML="",a("button","create-project-btn",null,"Create project",n).addEventListener("click",(()=>{!function(){d.style.display="block",a("h2","modal-title",null,"Section form",i);const t=a("form","todo-form",null,null,i),n=a("input","title","title",null,t,"Title");a("button","section-submit",null,"Submit",t,"Submit").addEventListener("click",(()=>{let t=((t,e)=>{const n=[];return{id:t,title:e,todos:n,addTodo:t=>{n.push(t)},deleteTodo:t=>{let e=n.indexOf(t);n.splice(e,1)}}})(n.value,n.value);console.log(t),e.push(t),r(),l(),c(e.find((t=>t.id===n.value)))})),u()}()})),e.forEach((t=>{const e=document.createElement("div");e.classList.add("nav-element"),"completed"===t.id&&e.classList.add("project-separator"),e.textContent=t.title,e.addEventListener("click",(()=>c(t))),n.appendChild(e)}))}function c(n){o.innerHTML="";const l=document.createElement("div"),v=document.createElement("div");v.classList.add("section-title"),v.textContent=n.title,l.appendChild(v);const f=document.createElement("button");if(f.type="button",f.innerHTML="Add Todo",f.classList.add("add-todo-button"),l.appendChild(f),f.addEventListener("click",(()=>{!function(){const n=document.createElement("h2");n.innerHTML="Create Todo",i.appendChild(n),d.style.display="block";const o=document.createElement("form");o.id="todo-form";const l=a("input","title","title",null,o,"Title"),s=a("textarea","description","description",null,o,"Description"),v=a("input","dueDate","dueDate",null,o,"Due Date"),f=a("select","priority","priority",null,o,"Priority",[{value:"low",text:"Low"},{value:"medium",text:"Medium"},{value:"top",text:"Top"}]);a("button","todo-submit",null,"Submit",o,"Submit").addEventListener("click",(()=>{let n=t(l.value,s.value,v.value,f.value);console.log(n),m("all",n),r(),c(e.find((t=>"all"===t.id)))})),i.appendChild(o),u(),p()}()})),0===n.todos.length){const t=document.createElement("p");t.textContent="No todos for this section.",l.appendChild(t)}else n.todos.forEach(((t,e)=>{const n=document.createElement("div");n.classList.add("todo");const o=document.createElement("input");o.type="checkbox",o.checked=t.complete,o.addEventListener("change",(()=>{t.complete=o.checked,o.checked?d.classList.add("crossed-out"):d.classList.remove("crossed-out")}));const d=document.createElement("div");d.textContent=t.title,d.addEventListener("click",(()=>s(t))),n.appendChild(o),n.appendChild(d),l.appendChild(n)}));o.appendChild(l)}function a(t,e,n,o,d,i,l){const c=document.createElement(t);if(c.setAttribute("name",n),c.setAttribute("id",e),"button"!==t){const t=document.createElement("label");t.setAttribute("for",e),t.textContent=i,d.appendChild(t)}if(c.innerHTML=o,l)for(const t of l){const e=document.createElement("option");e.value=t.value,e.textContent=t.text,c.appendChild(e)}return d.appendChild(c),c}function s(t,e){i.innerHTML=`\n      <p>Todo Details:</p>\n      <p>Title: ${t.title}</p>\n      <p>Descrption: ${t.description||"No details available"}</p>\n      <p>Due date: ${t.dueDate}<p>\n      <p>Priorty: ${t.priority}\n      `,d.style.display="block",u(),p()}function u(){const t=document.createElement("div");t.className="close",t.innerHTML="&times;",t.addEventListener("click",(()=>r())),i.appendChild(t)}function r(){d.style.display="none",i.innerHTML=""}function p(){const t=document.createElement("button");t.textContent="Update",t.addEventListener("click",(()=>(index,void r()))),i.appendChild(t)}function m(t,n){e.find((e=>e.id===t)).todos.push(n),l(),c(e.find((e=>e.id===t)))}l(),c(e.find((t=>"all"===t.id)))})()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,