(()=>{"use strict";const e=(e,t,n,d,o)=>({title:e,description:t,dueDate:n,priority:d,complite:o});let t=e("Open me...","i know how you feel... but keep going, just one step at a times","11/12/12","top");e("MyTodo2","sdfgsdg","11/12/12","top"),e("MyTodo3","sdfgsdg","11/12/12","top"),console.log(t);let n=((e,t)=>{const n=[];return{id:"newProj",title:"NewProj",todos:n,addTodo:e=>{n.push(e)},deleteTodo:e=>{let t=n.indexOf(e);n.splice(t,1)}}})();console.log(n);let d=[{id:"all",title:"All Todos",todos:[t]}];document.addEventListener("DOMContentLoaded",(function(){(()=>{const e=document.getElementById("navigation"),t=document.getElementById("content"),n=document.getElementById("modal"),o=document.getElementById("modal-content");function c(e){t.innerHTML="";const d=document.createElement("div"),c=document.createElement("div");c.classList.add("section-title"),c.textContent=e.title,d.appendChild(c);const s=document.createElement("button");if(s.type="button",s.innerHTML="Add Todo",s.classList.add("add-todo-button"),d.appendChild(s),s.addEventListener("click",(()=>{n.style.display="block";const e=document.createElement("div");e.className="close",e.innerHTML="&times;",e.addEventListener("click",(()=>i())),o.appendChild(e);const t=document.createElement("button");t.textContent="Update",t.addEventListener("click",(()=>l(index))),o.appendChild(t)})),0===e.todos.length){const e=document.createElement("p");e.textContent="No todos for this section.",d.appendChild(e)}else e.todos.forEach(((e,t)=>{const c=document.createElement("div");c.classList.add("todo");const s=document.createElement("input");s.type="checkbox",s.checked=e.complete,s.addEventListener("change",(()=>{e.complete=s.checked,s.checked?a.classList.add("crossed-out"):a.classList.remove("crossed-out")}));const a=document.createElement("div");a.textContent=e.title,a.addEventListener("click",(()=>function(e,t){o.innerHTML=`\n      <p>Todo Details:</p>\n      <p>Title: ${e.title}</p>\n      <p>Descrption: ${e.description||"No details available"}</p>\n      <p>Due date: ${e.dueDate}<p>\n      <p>Priorty: ${e.priority}\n      `,n.style.display="block";const d=document.createElement("div");d.className="close",d.innerHTML="&times;",d.addEventListener("click",(()=>i())),o.appendChild(d);const c=document.createElement("button");c.textContent="Update",c.addEventListener("click",(()=>l())),o.appendChild(c)}(e))),c.appendChild(s),c.appendChild(a),d.appendChild(c)}));t.appendChild(d)}function i(){n.style.display="none"}function l(e){i()}e.innerHTML="",d.forEach((t=>{const n=document.createElement("div");n.classList.add("nav-element"),"completed"===t.id&&n.classList.add("project-separator"),n.textContent=t.title,n.addEventListener("click",(()=>c(t))),e.appendChild(n)})),c(d.find((e=>"all"===e.id)))})()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,