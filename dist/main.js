(()=>{"use strict";const t=(t,e,o,n)=>({title:t,description:e,dueDate:o,priority:n});let e=t("MyTodo","sdfgsdg","11/12/12","top"),o=t("MyTodo2","sdfgsdg","11/12/12","top"),n=t("MyTodo3","sdfgsdg","11/12/12","top");console.log(e);let d=(t=>{const e=[];return{projectTitle:"NewProj",todos:e,addTodo:t=>{e.push(t)},deleteTodo:t=>{let o=e.indexOf(t);e.splice(o,1)}}})();d.addTodo(e),d.addTodo(o),d.addTodo(n),d.deleteTodo(n),console.log(d);const i=()=>{const t=document.getElementById("navigation"),e=document.getElementById("content"),o=document.getElementById("modal"),n=document.getElementById("modal-content");let d=[{id:"today",title:"Today",content:[]},{id:"week",title:"This Week",content:[]},{id:"all",title:"All Todos",content:[]}];function i(){d.forEach((e=>{const o=document.createElement("div");o.textContent=e.title,o.addEventListener("click",(()=>l(e))),t.appendChild(o)}))}function l(t){e.innerHTML="";const d=document.createElement("div");if(0===t.content.length){const t=document.createElement("p");t.textContent="No todos for this section.",d.appendChild(t)}else t.content.forEach(((t,e)=>{const i=document.createElement("div");i.textContent=t.title,i.addEventListener("click",(()=>function(t,e){n.innerHTML=`<p>Todo Details:</p><p>Title: ${t.title}</p><p>Details: ${t.details||"No details available"}</p>`,o.style.display="block",document.getElementById("close-modal").addEventListener("click",(()=>{o.style.display="none"}))}(t))),d.appendChild(i)}));e.appendChild(d)}i(),d.find((t=>"today"===t.id)).content=[{title:"Complete Assignment",details:"Finish the todo app project."},{title:"Go for a Run",details:"Stay active and healthy."}],i(),l(d.find((t=>"today"===t.id)))};document.addEventListener("DOMContentLoaded",(function(){i()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,