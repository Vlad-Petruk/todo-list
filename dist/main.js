(()=>{"use strict";const e=(e,t,n,d,o)=>({title:e,description:t,dueDate:n,priority:d,complite:o});let t=e("MyTodo","sdfgsdg","11/12/12","top"),n=(e("MyTodo2","sdfgsdg","11/12/12","top"),e("MyTodo3","sdfgsdg","11/12/12","top"));console.log(t);let d=(e=>{const t=[];return{projectTitle:"NewProj",todos:t,addTodo:e=>{t.push(e)},deleteTodo:e=>{let n=t.indexOf(e);t.splice(n,1)}}})();console.log(d);let o=[{id:"all",title:"All Todos",content:[]},{id:"today",title:"Today",content:[]},{id:"week",title:"This week",content:[]},{id:"important",title:"Important",content:[]},{id:"completed",title:"Completed",content:[]}];document.addEventListener("DOMContentLoaded",(function(){(()=>{const e=document.getElementById("navigation"),t=document.getElementById("content"),c=document.getElementById("modal"),i=document.getElementById("modal-content");function l(e){t.innerHTML="";const n=document.createElement("div"),d=document.createElement("div");if(d.classList.add("section-title"),d.textContent=e.title,n.appendChild(d),0===e.content.length){const e=document.createElement("p");e.textContent="No todos for this section.",n.appendChild(e)}else e.content.forEach(((e,t)=>{const d=document.createElement("div");d.classList.add("todo");const o=document.createElement("input");o.type="checkbox",o.checked=e.complete,o.addEventListener("change",(()=>{e.complete=o.checked,o.checked?l.classList.add("crossed-out"):l.classList.remove("crossed-out")}));const l=document.createElement("div");l.textContent=e.title,l.addEventListener("click",(()=>function(e,t){i.innerHTML=`\n      <p>Todo Details:</p>\n      <p>Title: ${e.title}</p>\n      <p>Descrption: ${e.description||"No details available"}</p>\n      <p>Due date: ${e.dueDate}<p>\n      <p>Priorty: ${e.priority}\n      `,c.style.display="block";const n=document.createElement("div");n.className="close",n.innerHTML="&times;",n.addEventListener("click",(()=>s())),i.appendChild(n);const d=document.createElement("button");d.textContent="Update",d.addEventListener("click",(()=>{s()})),i.appendChild(d)}(e))),d.appendChild(o),d.appendChild(l),n.appendChild(d)}));t.appendChild(n)}function s(){c.style.display="none"}!function(t,n,d){n.addTodo(d),o.find((e=>e.id===t)).content=n.todos,e.innerHTML="",o.forEach((t=>{const n=document.createElement("div");n.classList.add("nav-element"),n.textContent=t.title,n.addEventListener("click",(()=>l(t))),e.appendChild(n)})),l(o.find((e=>e.id===t)))}("week",d,n)})()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,