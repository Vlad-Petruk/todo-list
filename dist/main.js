(()=>{"use strict";const t=(t,e,n,o)=>({title:t,description:e,dueDate:n,priority:o});let e=t("MyTodo","sdfgsdg","11/12/12","top"),n=t("MyTodo2","sdfgsdg","11/12/12","top"),o=t("MyTodo3","sdfgsdg","11/12/12","top");console.log(e);let d=(t=>{const e=[];return{projectTitle:"NewProj",todos:e,addTodo:t=>{e.push(t)},deleteTodo:t=>{let n=e.indexOf(t);e.splice(n,1)}}})();d.addTodo(e),d.addTodo(n),d.addTodo(o),d.deleteTodo(o),console.log(d);document.addEventListener("DOMContentLoaded",(function(){(()=>{const t=document.getElementById("navigation"),e=document.getElementById("content"),n=document.getElementById("modal"),o=document.getElementById("modal-content");let d=[{id:"today",title:"Today",content:[]},{id:"week",title:"This Week",content:[]},{id:"all",title:"All Todos",content:[]}];function i(t){e.innerHTML="";const d=document.createElement("div");if(0===t.content.length){const t=document.createElement("p");t.textContent="No todos for this section.",d.appendChild(t)}else t.content.forEach(((t,e)=>{const i=document.createElement("div");i.textContent=t.title,i.addEventListener("click",(()=>function(t,e){o.innerHTML=`<p>Todo Details:</p><p>Title: ${t.title}</p><p>Details: ${t.details||"No details available"}</p>`,n.style.display="block";const d=document.createElement("div");d.className="close",d.innerHTML="&times;",d.addEventListener("click",(()=>l())),o.appendChild(d);const i=document.createElement("button");i.textContent="Update",i.addEventListener("click",(()=>{l()})),o.appendChild(i)}(t))),d.appendChild(i)}));e.appendChild(d)}function l(){n.style.display="none"}d.find((t=>"today"===t.id)).content=[{title:"Complete Assignment",details:"Finish the todo app project."},{title:"Go for a Run",details:"Stay active and healthy."}],d.forEach((e=>{const n=document.createElement("div");n.textContent=e.title,n.addEventListener("click",(()=>i(e))),t.appendChild(n)})),i(d.find((t=>"today"===t.id)))})()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,