(()=>{"use strict";const t=(t,e,n,o,i)=>({title:t,description:e,dueDate:n,priority:o,complite:i});let e=[{id:"All todos",title:"All todos",todos:[t("Open me...","i know how you feel... but keep going, just one step at a time","11/12/12","top")]}];document.addEventListener("DOMContentLoaded",(function(){(()=>{const n=document.getElementById("navigation"),o=document.getElementById("content"),i=document.getElementById("modal"),d=document.getElementById("modal-content"),l=a("div","section-title",null,null,o);function c(){n.innerHTML="",a("button","create-project-btn",null,"Create project",n).addEventListener("click",(()=>{!function(){i.style.display="block",a("h2","modal-title",null,"Section form",d);const t=a("form","todo-form",null,null,d),n=a("input","title","title",null,t,"Title");a("button","section-submit",null,"Submit",t,"Submit").addEventListener("click",(()=>{let t=((t,e)=>{const n=[];return{id:t,title:e,todos:n,addTodo:t=>{n.push(t)},deleteTodo:t=>{let e=n.indexOf(t);n.splice(e,1)}}})(n.value,n.value);console.log(t),e.push(t),p(),c(),s(e.find((t=>t.id===n.value)))})),r()}()})),e.forEach((t=>{const e=document.createElement("div");e.classList.add("nav-element"),"completed"===t.id&&e.classList.add("project-separator"),e.textContent=t.title,e.addEventListener("click",(()=>s(t))),n.appendChild(e)}))}function s(n){const c=o.children;for(const t of c)"section-title"!==t.id&&(t.innerHTML="");const v=document.createElement("div");l.innerHTML="",l.innerHTML=n.title;const h=document.createElement("button");if(h.type="button",h.innerHTML="Add Todo",h.classList.add("add-todo-button"),v.appendChild(h),h.addEventListener("click",(()=>{!function(){const n=document.createElement("h2");n.innerHTML="Create Todo",d.appendChild(n),i.style.display="block";const o=document.createElement("form");o.id="todo-form";const c=a("input","title","title",null,o,"Title"),u=a("textarea","description","description",null,o,"Description"),v=a("input","dueDate","dueDate",null,o,"Due Date"),h=a("select","priority","priority",null,o,"Priority",[{value:"low",text:"Low"},{value:"medium",text:"Medium"},{value:"top",text:"Top"}]);a("button","todo-submit",null,"Submit",o,"Submit").addEventListener("click",(()=>{let n=t(c.value,u.value,v.value,h.value);console.log(n),"All todos"===l.innerHTML||(console.log(l.textContent),f(l.textContent,n)),f("All todos",n),p(),s(e.find((t=>t.id===l.innerHTML)))})),d.appendChild(o),r(),m()}()})),0===n.todos.length){const t=document.createElement("p");t.textContent="No todos for this section.",v.appendChild(t)}else n.todos.forEach(((t,e)=>{const n=document.createElement("div");n.classList.add("todo");const o=document.createElement("input");o.type="checkbox",o.checked=t.complete,o.addEventListener("change",(()=>{t.complete=o.checked,o.checked?i.classList.add("crossed-out"):i.classList.remove("crossed-out")}));const i=document.createElement("div");i.textContent=t.title,i.addEventListener("click",(()=>u(t))),n.appendChild(o),n.appendChild(i),v.appendChild(n)}));o.appendChild(v)}function a(t,e,n,o,i,d,l){const c=document.createElement(t);if(c.setAttribute("name",n),c.setAttribute("id",e),"button"!==t){const t=document.createElement("label");t.setAttribute("for",e),t.textContent=d,i.appendChild(t)}if(c.innerHTML=o,l)for(const t of l){const e=document.createElement("option");e.value=t.value,e.textContent=t.text,c.appendChild(e)}return i.appendChild(c),c}function u(t,e){d.innerHTML=`\n      <p>Todo Details:</p>\n      <p>Title: ${t.title}</p>\n      <p>Descrption: ${t.description||"No details available"}</p>\n      <p>Due date: ${t.dueDate}<p>\n      <p>Priorty: ${t.priority}\n      `,i.style.display="block",r(),m()}function r(){const t=document.createElement("div");t.className="close",t.innerHTML="&times;",t.addEventListener("click",(()=>p())),d.appendChild(t)}function p(){i.style.display="none",d.innerHTML=""}function m(){const t=document.createElement("button");t.textContent="Update",t.addEventListener("click",(()=>(index,void p()))),d.appendChild(t)}function f(t,n){e.find((e=>e.id===t)).todos.push(n),c(),s(e.find((e=>e.id===t)))}c(),s(e.find((t=>"All todos"===t.id)))})()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,